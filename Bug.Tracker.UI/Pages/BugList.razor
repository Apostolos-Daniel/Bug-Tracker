@page "/bug-list"
@using Bug.Tracker.BugReader
@using Bug.Tracker.BugUpdater
@using Bug.Tracker.Models
@using Bug.Tracker.Models.Enums
@inject IBugReader BugReaderInstance
@inject IBugUpdater BugUpdaterInstance

@if (!editingBug)
{
	<BugCreator OnBugCreated="@BugCreationChangeHandler"></BugCreator>
}

<h2>Open bugs</h2>

@if (editingBug)
{
	<div>
		<label style="float:left; margin:5px;"><b>Title</b></label>
		<label style="float:left; margin:5px;" name="title">@selectedBug.Title</label>
	</div>
	<br />
	<br />
	<div>
		<label style="float:left; margin:5px;"><b>Description</b></label>
		<label style="float:left; margin:5px;" name="description">@selectedBug.Description</label>
	</div>
	<br />
	<br />
	<div>
		<label style="float:left; margin:5px;"><b>Status</b></label>
		<input style="float:left; margin:5px;" name="status" @bind-value="@selectedBug.Status" @bind-value:event="oninput" />
	</div>
	<br />
	<br />
	<div>
		<label style="float:left; margin:5px;"><b>Assigned To</b></label>
		<input style="float:left; margin:5px;" name="assigned" @bind-value="@selectedBug.AssignedTo" @bind-value:event="oninput" />
	</div>
	<br />
	<br />
	<br />
	<div>
		<button class="button button1" style="float:left; margin:20px;" onclick="@(async () => await UpdateBug(@selectedBug))">Update</button>
	</div>
}
else if (bugItems != null && bugItems.Any())
{
	<table class="table">
		<thead>
			<tr>
				<th>Bug Title</th>
				<th>Bug Description</th>
				<th>Assigned to</th>
				<th>Status</th>
				<th>Created</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var bugItem in bugItems)
			{
				<tr>
					<td>@bugItem.Title</td>
					<td>@bugItem.Description</td>
					<td>@bugItem.AssignedTo</td>
					<td>@bugItem.Status</td>
					<td>@bugItem.DateCreated</td>
					<td><button class="button button1" @onclick="@(() => EditBug(@bugItem))">View</button></td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	IEnumerable<BugItem> bugItems;
	bool editingBug = false;
	BugItem selectedBug = null;

	protected override async Task OnInitAsync()
	{
		await UpdateBugItems();
	}

	public async Task UpdateBugItems()
	{
		bugItems = (await BugReaderInstance.GetBugItems(BugStatus.open)).OrderByDescending(x => x.DateCreated);
	}

	public void EditBug(BugItem bugItem)
	{
		editingBug = true;
		selectedBug = bugItem;
	}

	public async Task UpdateBug(BugItem bugItem)
	{
		await BugUpdaterInstance.UpdateStatus(bugItem.Id, bugItem.Status, bugItem.AssignedTo);
		editingBug = false;

		selectedBug = null;
		await UpdateBugItems();
	}

	// when the authority selection changes, this will be called to update profile
	async Task BugCreationChangeHandler()
	{
		await UpdateBugItems();
	}
}